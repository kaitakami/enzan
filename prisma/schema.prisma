generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Project {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String      @unique @db.VarChar(240)
    slug          String      @unique @db.VarChar(240)
    repositoryUrl String?     @db.VarChar(240)
    upvotes       Int         @default(0)
    public        Boolean     @default(true)
    finished      Boolean     @default(false)
    description   String      @db.Text
    duration      Int
    tags          String[]
    languages     Language[]
    leader        User        @relation(fields: [leaderId], references: [id])
    members       User[]      @relation(name: "ProjectMembers")
    leaderId      String
    admissions    Admission[]
    updates       Update[]
}

model Admission {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.VarChar(600)
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Update {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @db.VarChar(240)
    content   String   @db.Text
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
}

model Language {
    name     String    @id
    projects Project[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    points        Int         @default(0)
    projects      Project[]   @relation(name: "ProjectMembers")
    accounts      Account[]
    sessions      Session[]
    leaderProject Project[]
    admissions    Admission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
